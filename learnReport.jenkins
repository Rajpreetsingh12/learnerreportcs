pipeline {
    agent any

    environment {
        GIT_REPO = "https://github.com/Rajpreetsingh12/learnerreportcs.git"
        REGISTRY = "docker.io"
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKERHUB_USERNAME = 'rajedocker1234'
        FRONTEND_REPO = 'learnerReportCS_frontend'
        BACKEND_REPO = 'learnerReportCS_backend'
        KUBE_CONTEXT = "minikube"
        VERSION = "v1.0.0"
        DOCKER_HUB_REPO = 'your-dockerhub-username'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${env.GIT_REPO}"
            }
        }

        stage('Checkout Submodules') {
            steps {
                script {
                    sh 'git submodule init && git submodule update'
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    dir("${env.BACKEND_REPO}") {
                        sh 'docker build -t $DOCKER_HUB_REPO/backend-$VERSION -t $DOCKER_HUB_REPO/backend-latest .'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir("${env.FRONTEND_REPO}") {
                        sh 'docker build -t $DOCKER_HUB_REPO/frontend-$VERSION -t $DOCKER_HUB_REPO/frontend-latest .'
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }

        stage('Push Backend Image') {
            steps {
                script {
                    sh 'docker push $DOCKER_HUB_REPO/backend-$VERSION'
                    sh 'docker push $DOCKER_HUB_REPO/backend-latest'
                }
            }
        }

        stage('Push Frontend Image') {
            steps {
                script {
                    sh 'docker push $DOCKER_HUB_REPO/frontend-$VERSION'
                    sh 'docker push $DOCKER_HUB_REPO/frontend-latest'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'kubectl config use-context $KUBE_CONTEXT'
                    sh 'helm upgrade --install learnerreport ./learnerReportHelm --set backend.image=$DOCKER_HUB_REPO/backend-$VERSION --set frontend.image=$DOCKER_HUB_REPO/frontend-$VERSION'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
