pipeline {
    agent any

    environment {
        GIT_REPO = "https://github.com/Rajpreetsingh12/learnerreportcs.git"
        REGISTRY = "docker.io"
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKERHUB_USERNAME = 'rajedocker1234' // Use this as your Docker Hub username
        FRONTEND_REPO = 'learnerReportCS_frontend'
        BACKEND_REPO = 'learnerReportCS_backend'
        KUBE_CONTEXT = "minikube"
        VERSION = "v1.0.0"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${env.GIT_REPO}"
            }
        }

        stage('Checkout Submodules') {
            steps {
                script {
                    sh 'git submodule init && git submodule update'
                }
            }
        }

        stage('Build Backend') {
            steps {
                script {
                    dir("${env.BACKEND_REPO}") {
                        // Build the backend image and tag it
                        sh 'docker build -t $DOCKERHUB_USERNAME/backend:$VERSION -t $DOCKERHUB_USERNAME/backend:latest .'
                    }
                }
            }
        }

        stage('Build Frontend') {
            steps {
                script {
                    dir("${env.FRONTEND_REPO}") {
                        // Build the frontend image and tag it
                        sh 'docker build -t $DOCKERHUB_USERNAME/frontend:$VERSION -t $DOCKERHUB_USERNAME/frontend:latest .'
                    }
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                script {
                    // Use credentials to login to Docker Hub
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }

        stage('Push Backend Image') {
            steps {
                script {
                    // Push the backend images to Docker Hub
                    sh 'docker push $DOCKERHUB_USERNAME/backend:$VERSION'
                    sh 'docker push $DOCKERHUB_USERNAME/backend:latest'
                }
            }
        }

        stage('Push Frontend Image') {
            steps {
                script {
                    // Push the frontend images to Docker Hub
                    sh 'docker push $DOCKERHUB_USERNAME/frontend:$VERSION'
                    sh 'docker push $DOCKERHUB_USERNAME/frontend:latest'
                }
            }
        }

        stage('Start Minikube') {   // Minikube setup stage
            steps {
                script {
                    // Start Minikube
                    sh 'minikube start'
                    // Set Minikube context after starting
                    sh 'kubectl config set-context minikube --cluster=minikube --user=minikube'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Deploy the application to Kubernetes using Helm
                    sh 'kubectl config use-context $KUBE_CONTEXT'
                    sh 'helm upgrade --install learnerreport ./learnerReportHelm --set backend.image=$DOCKERHUB_USERNAME/backend:$VERSION --set frontend.image=$DOCKERHUB_USERNAME/frontend:$VERSION'
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
